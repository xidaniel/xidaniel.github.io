[{"content":"Click here to move to my Github.\n","date":"2021-01-20T00:00:00Z","image":"https://algoxi.com/p/about-my-blog/blog_hu38ea12ef273fea81a503f42c01f80184_59432_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/about-my-blog/","title":"About My Blog"},{"content":" Please go Here to get more details about algorithms.\nSee some awesome projects to go Here\n","date":"2021-01-16T00:00:00Z","permalink":"https://algoxi.com/p/ace-algorithms-interview/","title":"Ace Algorithms Interview"},{"content":"What is Classpath?   Classpath represents the path where JVM can find corresponding classes.\n  source file name: xxx.java \u0026ndash;\u0026gt; xxx.class\n  In Windows:\n  C:\\work\\project1\\bin;C:\\shared;\u0026#34;D:\\My Documents\\project1\\bin\u0026#34;     In linux:\n  /usr/shared:/usr/local/bin:/home/liaoxuefeng/bin     . represents current path\n    How to Set Classpath?   In Windows:\n  java -cp .;C:\\work\\project1\\bin;C:\\shared abc.xyz.Hello     In linux:\n  java -cp .:/usr/shared:/usr/local/bin:/home/liaoxuefeng/bin     What is jar?   It is a zip format of the compressed file.\n  Manually Create:\n compress to zip format \u0026ndash;\u0026gt; modify the postfix to jar    Use Tools:\n Maven    ","date":"2021-01-08T00:00:00Z","permalink":"https://algoxi.com/p/classpath-and-jar-in-java/","title":"Classpath and jar in Java"},{"content":"What is File System?  如果父类的fields为private,子类就无法访问,所以protected关键字就出来了 子类的constructor的第一行必须super() 父类constructor 子类不会继承任何父类的constructor 只要class没有final修饰符,那么任何class都可以从它继承 多态适用于在同样的父类情况下,每个子类的方法不一样 package是用来解决namespace问题  ","date":"2021-01-08T00:00:00Z","permalink":"https://algoxi.com/p/ood-concepts/","title":"OOD Concepts"},{"content":"What is Circular Array?  Circular Array is that we can connect the start and end of the array, so that it is a cycle. Only used in bounded data structure. like bounded stack, queue, deque Usually use eager computation   \n Implement a Bounded Queue   APIs:\n boolean offer(Integer) Integer poll() Integer peek() int size() boolean isEmpty() boolean isFull()    public class BoundedQueue { int head; int tail; int size; Integer[] array; public BoundedQueue(int cap) { array = new Integer[cap]; head = tail = 0; size = 0; } public boolean offer(Integer value) { if (size == array.length) { return false; } array[tail] = value; //or (tail + 1) % array.length  tail = tail + 1 == array.length ? 0 : tail + 1; size++; return true; } public Integer peek() { if (size == 0) { return null; } return array[head]; } public Integer poll() { if (size == 0) { return null; } Integer result = array[head]; // or (head + 1) % array.length  head = head + 1 == array.length ? 0 : head + 1; size--; return result; } public int size() { return size; } public boolean isEmpty() { return size == 0; } public boolean isFull() { return size == array.length; } }   Implement a Bounded Stack   APIs:\n boolean offerFirst(Integer) Integer peek() Integer pollFirst() int size() boolean isEmpty() boolean isFull()    public class BoundedStack { int head; Integer[] array; int size; public BoundedStack(int cap) { array = new Integer[cap]; head = 0; size = 0; } public boolean offer(Integer value) { if (size == array.length) { return false; } array[head] = value; head++; size++; return true; } public Integer peek() { if (size == 0) { return null; } return array[head]; } public Integer pollFirst() { if (size == 0) { return null; } Integer result = array[head]; head--; size--; return result; } public int size() { return size; } public boolean isEmpty() { return size == 0; } public boolean isFull() { return size == array.length; } }   end.\n","date":"2021-01-06T00:00:00Z","image":"https://algoxi.com/p/circular-array-in-java/title_hu282b076c37962327b9e9f2f9941cedb7_55275_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/circular-array-in-java/","title":"Circular Array in Java"},{"content":"What is File System?    In computing, a file system or filesystem (often abbreviated to fs) controls how data is stored and retrieved. Without a file system, data placed in a storage medium would be one large body of data with no way to tell where one piece of data stops and the next begins. By separating the data into pieces and giving each piece a name, the data is easily isolated and identified. Taking its name from the way paper-based data management system is named, each group of data is called a \u0026ldquo;file.\u0026rdquo; The structure and logic rules used to manage the groups of data and their names is called a \u0026ldquo;file system.\u0026rdquo;\n    File System Architecture    A file system consists of two or three layers. Sometimes the layers are explicitly separated, and sometimes the functions are combined.[7]\n  The logical file system is responsible for interaction with the user application. It provides the application program interface (API) for file operations — OPEN, CLOSE, READ, etc., and passes the requested operation to the layer below it for processing. The logical file system \u0026ldquo;manage[s] open file table entries and per-process file descriptors\u0026rdquo;.[8] This layer provides \u0026ldquo;file access, directory operations, [and] security and protection\u0026rdquo;.[7]\n  The second optional layer is the virtual file system. \u0026ldquo;This interface allows support for multiple concurrent instances of physical file systems, each of which is called a file system implementation\u0026rdquo;.[8]\n  The third layer is the physical file system. This layer is concerned with the physical operation of the storage device (e.g. disk). It processes physical blocks being read or written. It handles buffering and memory management and is responsible for the physical placement of blocks in specific locations on the storage medium. The physical file system interacts with the device drivers or with the channel to drive the storage device.[7]\n    How To Design   Assumption\n In-memory Only for file and directory metadata (name, creation time, access time, modification time, etc.)    Use Cases\n create read update delete    classes\n  FileSystem  Entry  metadate 的生成 生成文件路径: 1.需要文件名称; 2.parent的文件   File extends Entry  实际的内容, 一般为byte 文件大小   Directory extends Entry  List\u0026lt; Entry \u0026gt; 当前directory数据 Directory文件的大小 File文件的数量      ","date":"2021-01-06T00:00:00Z","image":"https://algoxi.com/p/design-an-in-memory-file-system/title_hu34d4c6d1240f01afb00eddd9d284b137_49784_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/design-an-in-memory-file-system/","title":"Design An In-memory File System"},{"content":"Background There are two methods to implement sorting for Custom Class in Java.\n  Comparable\u0026lt; T \u0026gt;\n  It is an interface\n  \u0026lt; T \u0026gt; - the type of objects that this object may be compared to\n  It has only method:\nint compareTo(T o) { \u0026#34;do something\u0026#34; }   Java doc reference\n    Comparator\u0026lt; T \u0026gt;\n  It is an interface\n  \u0026lt; T \u0026gt; - the type of objects that may be compared by this comparator\n  We usually use one method\nint compare(T o1, T o2) { \u0026#34;do something\u0026#34; }   Java doc reference\n     Why Use It?   我们需要对自定义的类排序时,但是Java内部没有实现这样的接口\n  比如我们自定义一个类叫Dog, 要求根据dog的年龄进行排序\n  public class Dog { String name; int age; public Dog(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \u0026#34;Dog{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#39;}\u0026#39;; } }   Output 会报错:\npublic class Main { public static void main(String[] args) { Dog[] dogs = {new Dog(\u0026#34;David\u0026#34;, 3), new Dog(\u0026#34;Bill\u0026#34;, 1)}; Arrays.sort(dogs); System.out.println(Arrays.toString(dogs)); } } /* Exception in thread \u0026#34;main\u0026#34; java.lang.ClassCastException: com.algoxi.my_error.comparable.Dog cannot be cast to java.lang.Comparable at java.util.ComparableTimSort.countRunAndMakeAscending(ComparableTimSort.java:320) at java.util.ComparableTimSort.sort(ComparableTimSort.java:188) at java.util.Arrays.sort(Arrays.java:1246) at com.algoxi.Main.main(Main.java:12) */    How To Use It?   用comparable\n Dog类直接实现 comparable Dog类里面也要实现compareTo的方法  public class Dog implements Comparable\u0026lt;Dog\u0026gt; { String name; int age; public Dog(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \u0026#34;Dog{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#39;}\u0026#39;; } @Override public int compareTo(Dog o) { if (this.age == o.age) { return 0; } return this.age \u0026lt; o.age ? -1 : 1; } }  Output:  public class Main { public static void main(String[] args) { Dog[] dogs = {new Dog(\u0026#34;David\u0026#34;, 3), new Dog(\u0026#34;Bill\u0026#34;, 1)}; Arrays.sort(dogs); System.out.println(Arrays.toString(dogs)); } } /* [Dog{name=\u0026#39;Bill\u0026#39;, age=1}, Dog{name=\u0026#39;David\u0026#39;, age=3}] */   用Comparator\n 原来的Dog保持不变  public class Dog { String name; int age; public Dog(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \u0026#34;Dog{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#39;}\u0026#39;; } }  创建一个DogComparator类  import java.util.Comparator; public class DogComparator implements Comparator\u0026lt;Dog\u0026gt; { @Override public int compare(Dog o1, Dog o2) { if (o1.age == o2.age) { return 0; } return o1.age \u0026lt; o2.age ? -1 : 1; } }  Output: 要对comparator进行new的操作  public class Main { public static void main(String[] args) { Dog[] dogs = {new Dog(\u0026#34;David\u0026#34;, 3), new Dog(\u0026#34;Bill\u0026#34;, 1)}; Arrays.sort(dogs, new DogComparator()); System.out.println(Arrays.toString(dogs)); } } /* [Dog{name=\u0026#39;Bill\u0026#39;, age=1}, Dog{name=\u0026#39;David\u0026#39;, age=3}] */    Anonymous Inner Class   Anonymous Example\n  PriorityQueue\u0026lt;Dog\u0026gt; minHeap = new PriorityQueue\u0026lt;\u0026gt;(new Comparator\u0026lt;Dog\u0026gt;() { @Override public int compare(Dog o1, Dog o2) { if (o1.age == o2.age) { return 0; } return o1.age \u0026lt; o2.age ? -1 : 1; } });   Normal Example\n  PriorityQueue\u0026lt;Dog\u0026gt; minHeap = new PriorityQueue\u0026lt;\u0026gt;(new DogComparator());   public class DogComparator implements Comparator\u0026lt;Dog\u0026gt; { @Override public int compare(Dog o1, Dog o2) { if (o1.age == o2.age) { return 0; } return o1.age \u0026lt; o2.age ? -1 : 1; } }   Another Tips:\n We can use Collections.reverseOrder() in PriorityQueue\u0026rsquo;s constructor to implement maxHeap.     \u0026ldquo;==\u0026rdquo; and equals   For Object\n  check value: o1.equals(o2)\n  check address: o1 == o2\n  public static void main(String[] args) { String s1 = new String(\u0026#34;abc\u0026#34;); String s2 = new String(\u0026#34;abc\u0026#34;); System.out.println(s1 == s2); // false  System.out.println(s1.equals(s2)); //true }  because constant pool, they are created in same address    public static void main(String[] args) { String s1 = \u0026#34;abc\u0026#34;; String s2 = \u0026#34;abc\u0026#34;; System.out.println(s1 == s2); // true  System.out.println(s1.equals(s2)); //true }     For Primitive Type\n check value: i1 == i2    end.\n","date":"2021-01-04T00:00:00Z","image":"https://algoxi.com/p/comparable-and-comparator-in-java/comp_hub47c5bfc85d36c0060c7116740f93991_55540_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/comparable-and-comparator-in-java/","title":"Comparable and Comparator in Java"},{"content":"Configuration File  There are two kind of file format can be used in Spring Boot  application.properties application.yml (recommended)     Why Need Config File  To modify defaule value which be initialized by Spring Boot.   YAML vs. XML vs. properties   There are three kind of configuration file type we usually.\n  YAML\n  server:prot:8081    XML\n  \u0026lt;server\u0026gt; \u0026lt;prot\u0026gt;8081\u0026lt;/prot\u0026gt; \u0026lt;/server\u0026gt;     properties\n  server.prot: 8081      YAML Expression Syntax   Presents Number, String, Boolean value\n  double quotes \u0026quot; \u0026quot;\ninput: name:\u0026#34;daniel \\n cool\u0026#34;\\n 换行  output: daniel 换行 cool\n  single quotes ' '\ninput: name:\u0026#34;daniel \\n cool\u0026#34; output: daniel \\n cool      Presents Objece, Map\n  friends:lastName:danielage:21  friends:{lastName: daniel,age:21}    Presents List, Set\n  pets:- cat- dog- pig  pets:[cat,dog,pig]    Sample\n  person:lastName:helloage:18boss:falsebirth:2017/12/12maps:{k1: v1,k2:12}lists:‐ lisi‐ zhaoliudog:name:小狗age:12     Build Relationship Between YAML and Class   Sample\n  @Component // make this to container component, so that to use @ConfigurationProperties @ConfigurationProperties(prefix=\u0026#34;person\u0026#34;) //make binding between YAML and this class, prefix is used to specify a target attribute public class Person { private String lastName; private Integer age; private Boolean boss; private Date birth; private Map\u0026lt;String, Object\u0026gt; maps; private List\u0026lt;Object\u0026gt; lists; private Dog dog; // this is a object }     ","date":"2020-12-30T00:00:00Z","image":"https://algoxi.com/p/03-spring-boot/yaml_hu9652c99ff68d1cbac3bdebdcad6b82b4_59388_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/03-spring-boot/","title":"03 Spring Boot"},{"content":"HTTP   HTTPis a protocol which allows the fetching of resources, such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. It is an application layer protocol that is sent over TCP, or over a TLS-encrypted TCP connection, though any reliable transport protocol could theoretically be used. A complete document is reconstructed from the different sub-documents fetched, for instance text, layout description, images, videos, scripts, and more.\n  Experiment:\n  request\nGET / HTTP/1.1 Host: developer.mozilla.org Accept-Language: fr  \n  response\nHTTP/1.1 200 OK Date: Sat, 09 Oct 2010 14:28:02 GMT Server: Apache Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT ETag: \u0026#34;51142bc1-7449-479b075b2891b\u0026#34; Accept-Ranges: bytes Content-Length: 29769 Content-Type: text/html \u0026lt;!DOCTYPE html... (here comes the 29769 bytes of the requested web page)  \n     RESTFul  Representational State Transfer GET \u0026ndash;\u0026gt; read POST \u0026ndash;\u0026gt; create, update PUT \u0026ndash;\u0026gt; update DELETE \u0026ndash;\u0026gt; delete   About XML   eXtensible Markup Language, 可扩展标记语言,是一种程序与程序之间传输数据的标记语言\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;!DOCTYPE note SYSTEM \u0026#34;book.dtd\u0026#34;\u0026gt; \u0026lt;book id=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;name\u0026gt;Java\u0026lt;/name\u0026gt; \u0026lt;author\u0026gt;Cay S. Horstmann\u0026lt;/author\u0026gt; \u0026lt;isbn lang=\u0026#34;CN\u0026#34;\u0026gt;1234567\u0026lt;/isbn\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;tag\u0026gt;Java\u0026lt;/tag\u0026gt; \u0026lt;tag\u0026gt;Network\u0026lt;/tag\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;pubDate/\u0026gt; \u0026lt;/book\u0026gt;   XML Downside\n 文件格式庞大复杂,内存占用大传输占用带宽 服务端课客户端需要大量的代码解析 不同浏览器之间解析XML的方式不一样    XML的解析API\n  Document Object Model (DOM)：一次性读取XML，并在内存中表示为树形结构\nInputStream input = Main.class.getResourceAsStream(\u0026#34;/book.xml\u0026#34;); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.parse(input);   Simple API for XML (SAX)：它是一种基于流的解析方式，边读取XML边解析，并以事件回调的方式让调用者获取数据。因为是一边读一边解析，所以无论XML有多大，占用的内存都很小。\nInputStream input = Main.class.getResourceAsStream(\u0026#34;/book.xml\u0026#34;); SAXParserFactory spf = SAXParserFactory.newInstance(); SAXParser saxParser = spf.newSAXParser(); saxParser.parse(input, new MyHandler());      JSON   javascript object notation, 新型的轻量级数据交换格式\n{ \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Java核\u0026#34;, \u0026#34;author\u0026#34;: { \u0026#34;firstName\u0026#34;: \u0026#34;Abc\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Xyz\u0026#34; }, \u0026#34;isbn\u0026#34;: \u0026#34;1234567\u0026#34;, \u0026#34;tags\u0026#34;: [\u0026#34;Java\u0026#34;, \u0026#34;Network\u0026#34;] }   Upside\n  JSON只允许使用UTF-8编码，不存在编码问题\n  JSON只允许使用双引号作为key，特殊字符用\\转义，格式简单；\n  格式是压缩的,占用带宽小\n  浏览器内置JSON支持，如果把数据用JSON发送给浏览器，可以用JavaScript直接处理\n  支持多种语言\n  能够直接被服务端的代码使用,简化代码开发量\n    JSON的解析API\n  Jackson\nInputStream input = Main.class.getResourceAsStream(\u0026#34;/book.json\u0026#34;); ObjectMapper mapper = new ObjectMapper(); // 反序列化时忽略不存在的JavaBean属性: mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); Book book = mapper.readValue(input, Book.class);      CURL   以命令的方式来执行HTTP协议的请求工具\n  可以通过CURL操作HTTP的GET/POST/PUT/DELETE方法\n  访问一个网页\ncurl www.google.com //default is get   现实http response的头信息\ncurl -i www.google.com   显示一次http请求的通信过程\ncurl -v www.google.com   执行GET/POST/PUT/DELETE方法\ncurl -X GET/POST/PUT/DELETE www.google.com   ","date":"2020-12-30T00:00:00Z","image":"https://algoxi.com/p/web-technology/web_huf47c5312a91429d9f85119bb2bdf7d27_49557_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/web-technology/","title":"Web Technology"},{"content":"Start Project from Spring Initializer   Main file\n src/main/java/com.example/main    resources\n static: store static resources like js, css, images templates: store all templates files application.properties: config file, can modify some setting     “Project Structure” \nMain Function   This method aims to run the spring boot application\n@SpringBootApplication public class HelloWorldApplication { public static void main(String[] args) { SpringApplication.run(HelloWorldApplication.class, args); } }   @SpringBootApplication\n  To mark Spring Boot must run this main method of this class to run Spring Boot application\n@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) }) public @interface SpringBootApplication { ... }     Controller Service   @RestController public class HelloController { @RequestMapping(\u0026#34;/hello\u0026#34;) public String hello() { return \u0026#34;Hello Spring Boot!\u0026#34;; } }   @RestController\n  the return value of all methods will be wirtten on brower\n@Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Controller @ResponseBody public @interface RestController { @AliasFor( annotation = Controller.class ) String value() default \u0026#34;\u0026#34;; }     Deploy   add plugin in pom.xml\n\u0026lt;!-- this plugin make application to a jar package\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt;   Using mvn package commend to generate jar file\n  find jar file it in target file, then use terminal to open it\njava -jar filename   To Explore More   spring-boot-starter-web\n In this project, we utilized web to develop web application.  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;   There many starter we can use\n   Name Description     spring-boot-starter Core starter, including auto-configuration support, logging and YAML   spring-boot-starter-activemq Starter for JMS messaging using Apache ActiveMQ   spring-boot-starter-amqp Starter for using Spring AMQP and Rabbit MQ   spring-boot-starter-aop Starter for aspect-oriented programming with Spring AOP and AspectJ   spring-boot-starter-artemis Starter for JMS messaging using Apache Artemis   spring-boot-starter-batch Starter for using Spring Batch   spring-boot-starter-cache Starter for using Spring Framework’s caching support   spring-boot-starter-data-cassandra Starter for using Cassandra distributed database and Spring Data Cassandra   spring-boot-starter-data-cassandra-reactive Starter for using Cassandra distributed database and Spring Data Cassandra Reactive   spring-boot-starter-data-couchbase Starter for using Couchbase document-oriented database and Spring Data Couchbase   spring-boot-starter-data-couchbase-reactive Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive   spring-boot-starter-data-elasticsearch Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch   spring-boot-starter-data-jdbc Starter for using Spring Data JDBC   spring-boot-starter-data-jpa Starter for using Spring Data JPA with Hibernate   spring-boot-starter-data-ldap Starter for using Spring Data LDAP   spring-boot-starter-data-mongodb Starter for using MongoDB document-oriented database and Spring Data MongoDB   spring-boot-starter-data-mongodb-reactive Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive   spring-boot-starter-data-neo4j Starter for using Neo4j graph database and Spring Data Neo4j   spring-boot-starter-data-r2dbc Starter for using Spring Data R2DBC   spring-boot-starter-data-redis Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client   spring-boot-starter-data-redis-reactive Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client   spring-boot-starter-data-rest Starter for exposing Spring Data repositories over REST using Spring Data REST   spring-boot-starter-data-solr Starter for using the Apache Solr search platform with Spring Data Solr   spring-boot-starter-freemarker Starter for building MVC web applications using FreeMarker views   spring-boot-starter-groovy-templates Starter for building MVC web applications using Groovy Templates views   spring-boot-starter-hateoas Starter for building hypermedia-based RESTful web application with Spring MVC and Spring HATEOAS   spring-boot-starter-integration Starter for using Spring Integration   spring-boot-starter-jdbc Starter for using JDBC with the HikariCP connection pool   spring-boot-starter-jersey Starter for building RESTful web applications using JAX-RS and Jersey. An alternative to spring-boot-starter-web   spring-boot-starter-jooq Starter for using jOOQ to access SQL databases. An alternative to spring-boot-starter-data-jpa or spring-boot-starter-jdbc   spring-boot-starter-json Starter for reading and writing json   spring-boot-starter-jta-atomikos Starter for JTA transactions using Atomikos   spring-boot-starter-jta-bitronix Starter for JTA transactions using Bitronix. Deprecated since 2.3.0   spring-boot-starter-mail Starter for using Java Mail and Spring Framework’s email sending support   spring-boot-starter-mustache Starter for building web applications using Mustache views   spring-boot-starter-oauth2-client Starter for using Spring Security’s OAuth2/OpenID Connect client features   spring-boot-starter-oauth2-resource-server Starter for using Spring Security’s OAuth2 resource server features   spring-boot-starter-quartz Starter for using the Quartz scheduler   spring-boot-starter-rsocket Starter for building RSocket clients and servers   spring-boot-starter-security Starter for using Spring Security   spring-boot-starter-test Starter for testing Spring Boot applications with libraries including JUnit Jupiter, Hamcrest and Mockito   spring-boot-starter-thymeleaf Starter for building MVC web applications using Thymeleaf views   spring-boot-starter-validation Starter for using Java Bean Validation with Hibernate Validator   spring-boot-starter-web Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container   spring-boot-starter-web-services Starter for using Spring Web Services   spring-boot-starter-webflux Starter for building WebFlux applications using Spring Framework’s Reactive Web support   spring-boot-starter-websocket Starter for building WebSocket applications using Spring Framework’s WebSocket support      end.\n","date":"2020-12-29T00:00:00Z","image":"https://algoxi.com/p/02-spring-boot/hellospring_hu9652c99ff68d1cbac3bdebdcad6b82b4_57005_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/02-spring-boot/","title":"02 Spring Boot"},{"content":"Maven  What can Maven do?  Dependencies Management: Mange different jar package, package index be stetted in pom.xml Execute code Test code One-click build project   Maven Project Content Structure  src/main/java \u0026ndash;\u0026gt; core code src/main/resources \u0026ndash;\u0026gt; configure files src/test/java \u0026ndash;\u0026gt; test code src/test/resources \u0026ndash;\u0026gt; test configure files src/main/webapp \u0026ndash;\u0026gt; index.html, js, css, images, etc.   Maven Commends  mvn clean \u0026ndash;\u0026gt; delete target file why? // if we change env to develop project, because the configuration is different\n  mvn compile \u0026ndash;\u0026gt; generate a new targert file from main file\n  mvn test \u0026ndash;\u0026gt; compile code from main file and test file\n  mvn package \u0026ndash;\u0026gt; (also compile, test)generate target file\n  mvn install (also compile, test, and package) \u0026ndash;\u0026gt; install package into local repository\n  mvn deploy\n  ​ Project Cycle: from 1 to 5.\n Maven Model  Dependences management Build project   \nCreate Maven Project in IDE  With archetype Without archetype (recommend)  end.\n","date":"2020-12-29T00:00:00Z","image":"https://algoxi.com/p/about-maven/maven_hua8fe9f0c89ee52520f02ae9a61e30260_118386_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/about-maven/","title":"About Maven"},{"content":"Essential Coding Skills and Tricks in Java Data Structure Operation  Array   Array is a consecutive allocated memory space, no overhead\n  It\u0026rsquo;s size is fixed.\n  它是mutable类型可以直接在原来位置进行CURD\n  Iterate an array from left to right\nfor (int i = 0; i \u0026lt; array.length; i++)   Iterate an array from right to left\nfor (int i = array.length - 1; i \u0026gt;= 0; i++)   Iterate an array custom step\nfor (int i = 0; i \u0026lt; array.length - 1; i+=k) // k is step   Convert a List to an array\nint[] array = new int[size]; for (int i = 0; i \u0026lt; list.size(); i++) { array[i] = list.get(i); }   One array \u0026amp;\u0026amp; two loops, skip cur element\nint[] array = {1,2,3}; int[] result = new int[array.length]; for (int i = 0; i \u0026lt; array.length; i++) { int sum = 0; for (int j = 0; j \u0026lt; array.length; j++) { if (i == j) { continue; } sum += i * j; } result[i] = sum; } //result = [5,8,9]   Convert an array in to a 2D array\n/* [1,2,3,4,5,6,7,8] [[1,2,3,4], [5,6,7,8]] */ r = 2; c = 4; for (int i = 0; i \u0026lt; r; i++) { for (int j = 0; j \u0026lt; c; j++) { board[i][j] = array[i * c + j]; } }   Print each character using loop\nfor (char c = \u0026#39;a\u0026#39;; c \u0026lt;= \u0026#39;z\u0026#39;; c++) { System.out.println(c); }     Comparesion and Range of Array  Question laicode119  Use the least number of comparisons to get the largest and smallest number in the given integer array. Return the largest number and the smallest number. Answer:  We can use 2 / n times swap to make sure that left half of array contain the largest num and right half contain the smallest num [7, 4, 5, 6, 3, 9] \u0026ndash;\u0026gt; swap(i, n - 1- i) \u0026ndash;\u0026gt; [9, 4, 6, 5, 3, 7]  (0, (n -1) / 2) ; (n / 2, n - 1)   [7, 4, 5, 10, 6, 3, 9] \u0026ndash;\u0026gt; swap(i, n - 1- i) \u0026ndash;\u0026gt; [9, 4, 6, 10, 5, 3, 7]  (0, (n -1) / 2) ; (n / 2, n - 1) include middle value 10         / and %   Example:\n 3 % 10 = 3, 3 / 10 = 0 12 % 10 = 2, 12 / 10 = 1    In 2D array: Given a index of element to find coresponding row and column\nrow = index / column; column = index % column;   Convert digit number to single number\nint num = 123; while (num != 0) { int cur = num % 10; System.out.println(cur); num /= 10; }   Implement adder\n//plus one //input: [9,9,9] //output: [1,0,0,0] public int[] plueOne(int[] input) { int carry = 1; for (int i = input.length - 1; i \u0026gt;= 0; i--) { int cur = input[i] + carry; carry = cur / 10; input[i] = cur % 10; } if (carry != 0) { int[] result = new int[input.length + 1]; result[0] = carry; for (int i = 0; i \u0026lt; input.length - 1; i++) { result[i + 1] = input[i]; } return result; } return input; }    Slope  int slope = (y1 - y0) / (x1 - x0) double slope = ()(y1 - y0) + 0.0) / (x1 - x0)   String   String 是一个object, it is immutable type in java. If we want to operate(CRUD) it, it must be a charArray\n  Convert to charArray\n  char[] array = string.toCharArray(); Linked List   It is a non-consecutive structure, overhead of multiple objects with the \u0026ldquo;next\u0026rdquo; reference\n  Using fast and slow pointer\n find middle of linked list find if linked list has a cycle    reverse linked list\n  dummy node\n  Tree  Tree Travseral  Pre-order In-order Post-order    HashMap hashMap是一个array形式的数组,每个index存\n  Guarantee the hashcode always be positive\nkey.hashCode() \u0026amp; 0x7FFFFFFF;   Generate a hashMap from a list or an array\nHashMap\u0026lt;Character, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); //Method 1 in Java 8 for (char cur : s.toCharArray()) { Integer count = map.getOrDefault(cur, 0); map.put(cur, count + 1) } //Method 2 for (char cur : s.toCharArray()) { Integer count = map.get(cur); if (count == null) { count = 1; } else { count++; } map.put(cur, count); }   Iterate each of the key, value pairs in a hashMap\nfor (Map.Entry\u0026lt;K, V\u0026gt; entry : map.entrySet()) { entry.getValue(); entry.getKey(); }   HashSet   Generate HashSet\nSet\u0026lt;Character\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (char cur : s.toCharArray()) { if (set.add(cur)) { System.out.println(\u0026#34;adding new char to the set\u0026#34;); } else { return false; } }   Java Concepts Object-Oriented-Design (OOD)   key words: class, object, reference, dereference, primitive type, class types, fields, constructor, stack, heap, final, static\n  pass by value;\n primitive type: copy of the value itself objects: copy of the object reference    array\n it is a object \u0026ldquo;length\u0026rdquo; is a field of the array object, it also is a final type    NullPointerException (NPE) vs. Empty\n NPE: deference to null, null is object    linked list vs. LinkedList\n  eager computation and lazy computation\n  Interface\n It has some abality Can\u0026rsquo;t be instantiate, should implements    Abstract class\n Can\u0026rsquo;t be instantiate    Abstract class Interface     It have abstract and non-abstract methods has only abstact method   doesn\u0026rsquo;t support multiple inheritance supports multiple inheritance   have final, non-final, static and non-static variables has only static and final variables   have static methods, main method and constructor can\u0026rsquo;t have static methods, main method or constructor   provide the implementation of interface can\u0026rsquo;t provide the implementation of abstract class   abstract keyword is used to declare abstract class interface keyword is used to declare interface        Good Practice:\n Declare into a general type, initialize into a concrete trap(Interface are also types)    Amortized Time Complexity\n ArrayList HashMap    ArrayList vs. LinkedList\n If we have a lot of random access operations, or always add/remove at the end, or time complexity is similar for using ArrayList and LinkedList, use ArrayList (overhead and locality)    Logical Operator Short Circuit\n  ","date":"2020-12-29T00:00:00Z","image":"https://algoxi.com/p/essential-coding-skills-and-tricks-in-java/tricks_hu694bfe41cd6616705a421d1bebe968e2_47124_120x120_fill_box_smart1_2.png","permalink":"https://algoxi.com/p/essential-coding-skills-and-tricks-in-java/","title":"Essential Coding Skills and Tricks in Java"},{"content":"Spring Boot  Why?  Before: import packages + dependences + write config files + test development logic + deploy + \u0026hellip;.. Now: Spring Boot can simplify those workflow  Introduction    Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \u0026ldquo;just run\u0026rdquo;.\n   Spring Boot来简化Spring应用开发,去翻从简,产品级别应用.\n  可以快速创建独立运行的Spring项目以及主流框架的集成\n  J2EE开发的一站式解决方案\n  与云计算天然集成\n  Applyed in Microservices\n   Monolithic Architecture vs. Microservices Architecture  一个应用应该是一组小型服务;可以通过HTTP进行通信 每一个功能元素都是一个可独立替换和独立升级的软件单元 Microservices Development History Reference   Figure: Architecture differences between traditional monolithic applications and microservices \n Prerequisites  Java and IDE (Eclipse or IntelliJ) Maven or Gradle Basic understanding of Spring: Java Config, component-scanning, Spring driven testing and Spring data-management.  ","date":"2020-12-28T00:00:00Z","image":"https://algoxi.com/p/01-spring-boot/spring%20boot_hu17e3c61dd8bf93503f3020bdb5012b49_44283_120x120_fill_q75_box_smart1.jpg","permalink":"https://algoxi.com/p/01-spring-boot/","title":"01 Spring Boot"},{"content":"Markdown Syntax Italics   _   Bold   **   Header    #   Link other web sites   Inline links\n  [text](web site address)   example: Go to xi\u0026rsquo;s blog\n    reference links\n  here is a [line][here] [here]: https://www.algoxi.com   Here is a Link.\n     Images   Inline image link\n  ![\u0026#34;text\u0026#34;](image address)     reference link\n  [Xi\u0026#39;s blog][blog] [blog]: https://www.algoxi.com     Blockquotes   \u0026gt;\u0026#34;This is a blockquotes example\u0026#34;    \u0026ldquo;Happy every day!\u0026rdquo;\n   Lists  Unordered * or -  Milk   Ordered  Mile Cake    Font   \u0026lt;font color= red size =5\u0026gt; text \u0026lt;/font\u0026gt;   ","date":"2020-12-27T00:00:00Z","permalink":"https://algoxi.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Workflow  workflow \n建立本地repository  git init //会在当前目录下建立一个.git隐藏文件  设置签名   项目级别/仓库级别;仅在当前本地库范围有效\n git config user.name xiwang git config user.email xiwang3317@gmail.com 配置保存在当前的.git/config文件里面    系统用户级别:(recommend)\n  git config \u0026ndash;global user.name xiwang\n  git config \u0026ndash;global user.email xiwang3317@gmail.com\n  保存在用户~/.gitconfig文件里面\n    查看状态  git status //查看工作区、暂存区状态  增加到缓存区  git add 文件名 //把工作区的添加到暂存区,把CRLF转为LF git add . // add all files  提交到本地库  git commit -m “comments” 文件名  Remote  git remote add original https: //\u0026hellip; git remote -v git push original master  ","date":"2020-12-26T00:00:00Z","image":"https://algoxi.com/p/git-guide/common_hudefe061290d74d1eb5a0ca07ad1c490f_40111_120x120_fill_q75_box_smart1.jpg","permalink":"https://algoxi.com/p/git-guide/","title":"Git Guide"},{"content":"Used Tools  hugo + github.io + custom domain name  Install hugo  brew install hugo hugo new site myblog search themes hugo server -D hugo server -t \u0026ndash;buildDrafts hugo new post/blog.md hugo \u0026ndash;theme=m10c \u0026ndash;baseUrl=\u0026ldquo;https://xidaniel.github.io/\u0026quot; \u0026ndash;buildDrafts cd public/ git init git add . git commit -m \u0026ldquo;My first submit\u0026rdquo; git remote add origin https://github.com/xidaniel/xidaniel.github.io.git git push -u origin master  Update Post  hugo -D //generate new public hugo server -D //locally review  ","date":"2020-12-25T00:00:00Z","permalink":"https://algoxi.com/p/setup-your-own-blog-custom-domain-name/","title":"Setup Your Own Blog (Custom Domain Name)"},{"content":"Data Flow: business system \u0026ndash;\u0026gt; log \u0026ndash;\u0026gt; flume collectiong, aggregating etc. \u0026ndash;\u0026gt; kafka streaming 数据清洗和处理 \u0026ndash;\u0026gt; spark streaming 流式计算\nMongoDB Concepts: database / collection / document  show dbs use database name, access db local current database name show collections CRUD one to many structure  Elasticsearch vs. Solr  open http://localhost:9200 check collection http://localhost:9200/_cat/indices check index http://localhost:9200/recommender/_search?pretty 条件查询 curl \u0026ldquo;localhost:9200/recommender/_search?pretty\u0026rdquo; -d \u0026lsquo;{\u0026ldquo;query\u0026rdquo;: {\u0026ldquo;bool\u0026rdquo; : {\u0026ldquo;must\u0026rdquo; : {\u0026ldquo;exists\u0026rdquo; : {\u0026ldquo;field\u0026rdquo;: \u0026ldquo;tags\u0026rdquo;}}}}}\u0026rsquo;  SQL  count group by order distinct  Zookeeper  jps check all java process start: ./bin/zkServer.sh start  Redis  run src/redis-server  ","date":"2020-12-24T00:00:00Z","permalink":"https://algoxi.com/p/movie-recommendation-system/","title":"Movie Recommendation System"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"2019-03-10T00:00:00Z","permalink":"https://algoxi.com/p/rich-content/","title":"Rich Content"}]